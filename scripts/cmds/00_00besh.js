const fs = require('fs');
const axios = require('axios');

module.exports = {
	config: {
		name: "bondhu",
		author: "Cliff", // API by bungdas
		version: "2.0",
		cooldowns: 0,
		role: 0,
		shortDescription: {
			bn: "‡¶§‡ßã‡¶∞ ‡¶≠‡¶æ‡¶∞‡ßç‡¶ö‡ßÅ‡ßü‡¶æ‡¶≤ ‡¶¨‡ßá‡¶∏‡ßç‡¶ü‡¶ø!"
		},
		longDescription: {
			bn: "‡¶§‡ßã‡¶∞ ‡¶ó‡ßã‡¶™‡¶® ‡¶ï‡¶•‡¶æ ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶ø ‡¶∞‡ßá‡¶°‡¶ø! ‡¶ï‡¶æ‡¶ì‡¶ï‡ßá ‡¶¨‡¶≤‡¶¨‡ßã ‡¶®‡¶æ, ‡¶™‡ßç‡¶∞‡¶Æ‡¶ø‡¶∏ üòâ"
		},
		category: "Talk",
		guide: {
			bn: "‡¶≤‡¶ø‡¶ñ {p}bondhu <‡¶§‡ßã‡¶∞ ‡¶ï‡¶•‡¶æ>"
		}
	},

	onStart: async function ({ api, event, args }) {
		const input = args.join(" ");
		const botID = api.getCurrentUserID();
		const botData = await api.getUserInfo(botID);
		const sender = event.type === "message_reply" ? event.messageReply.senderID : event.senderID;
		const userInfo = await api.getUserInfo(sender);
		const userName = userInfo[sender].name;
		const botName = botData[botID].name;
		const replyMessage = event.type === "message_reply" ? event.messageReply.body : "‡¶§‡ßÅ‡¶á ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶≤‡¶¨‡¶ø ‡¶®‡¶æ?";
		const userMessages = event.type === "message" ? input : `${userName}: ${replyMessage}\n${input}`;

		if (input.length < 2) {
			const responses = [
				"‡¶¨‡¶≤‡ßá‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ, ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®? üòè",
				"‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶§‡ßã‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá‡¶°‡¶ø! üòé",
				"‡¶ï‡¶ø ‡¶∞‡ßá, ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡¶∏‡¶ø‡¶™ ‡¶Ü‡¶õ‡ßá ‡¶®‡¶æ‡¶ï‡¶ø? ü§î",
				"‡¶Ü‡¶ú‡¶ï‡ßá ‡¶¶‡¶ø‡¶® ‡¶ï‡ßá‡¶Æ‡¶® ‡¶ï‡¶æ‡¶ü‡¶≤‡ßã? üòÉ",
				"‡¶ï‡ßá‡¶â ‡¶ï‡¶ø ‡¶§‡ßã‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá? üò§",
				"‡¶¨‡¶≤‡ßã ‡¶¨‡¶≤‡ßã, ‡¶ó‡ßã‡¶™‡¶® ‡¶ï‡¶•‡¶æ ‡¶∂‡ßÅ‡¶®‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≤‡¶æ‡¶ó‡ßá! üòâ"
			];
			const randomResponse = responses[Math.floor(Math.random() * responses.length)];
			api.sendMessage(randomResponse, event.threadID, event.messageID);
		} else {
			try {
				const prompt = `‡¶§‡ßÅ‡¶á ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶¨‡¶ø, ‡¶Ø‡ßá‡¶® ‡¶Æ‡¶®‡ßá ‡¶π‡ßü ‡¶§‡ßÅ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡ßü ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶´‡¶æ‡¶® ‡¶ï‡¶∞‡¶¨‡¶ø, ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶¨‡¶ø‡•§ ‡¶§‡ßã‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶π‡¶≤‡ßã ${botName}, ‡¶Ü‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ø‡¶≠ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶∏! üòâ`;

				const response = await axios.get(`https://jeromeee.onrender.com/api/bes?question=${encodeURIComponent(prompt + input)}`);
				const message = response.data.reply;
				api.sendMessage(message, event.threadID, event.messageID);
			} catch (error) {
				if (error.response) {
					console.log(error.response.status);
					console.log(error.response.data);
					if (error.response.status === 401 && error.response.data.error.message.startsWith("You didn't provide an API key")) {
						api.sendMessage("‡¶ì‡¶á! API-Key ‡¶¶‡ßá‡ßü‡¶®‡¶ø ‡¶ï‡ßá‡¶®? ‡¶¶‡ßá, ‡¶ú‡¶≤‡¶¶‡¶ø ‡¶¶‡ßá! üò§", event.threadID, event.messageID);
					}
				} else {
					console.log(error.message);
					api.sendMessage("‡¶¨‡¶æ‡¶π! ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßã! ü§¶‚Äç‚ôÇÔ∏è: " + error.message, event.threadID);
				}
			}
		}
	}
};
